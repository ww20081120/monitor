<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<http://play.grafana.org/dashboard/db/graph-styles>
<script src="/static/js/jquery-3.1.1.min.js"></script>
<script src="/static/js/plugins/echarts.js"></script>
<script src="/static/js/plugins/echarts-more.js"></script>
<script src="/static/js/public.js"></script>
<link href="/static/css/bootstrap.min.css?v=3.3.6" rel="stylesheet">

<style>
    .small-font{
        font-size:12px;
        -webkit-transform-origin-x: 0;
        -webkit-transform: scale(0.85);
        font-weight:100;
    }
    .small-image-font{
        font-size:15px;
        -webkit-transform-origin-x: 0;
        -webkit-transform: scale(0.85);
        font-weight:100;
    }
    .small-td-font {
        font-size:5px;
        --webkit-transform-origin-x:0;
        --webkit-transform: scale(0.5);
    }

    .graph {
        padding: 6px;
        border-bottom:1px solid #404040;
        border-right:1px solid #404040;
    }

    .image-div{
        margin-top: 20px;
        background-color:#141414;
        height:auto;
        margin-top: 0px;
    }

    ::-webkit-scrollbar {
        width: 0.01em;
    }

    ::-webkit-scrollbar:horizontal
    {
        height: 0.01em;
    }

    body {
        background-color:#000000;
        color:#ffffff;
    }
   th {
       border:none;
   }
   td {
       padding: 2px;
   }
   .class1{
       width: 20px;
       height: 5px;
       float: left;
       margin-top: 7px;
   }
</style>
<script>
(function(d){"object"===typeof module&&module.exports?module.exports=d:d(Echarts)})(function(d){(function(c){function d(){return!!this.points.length}function g(){this.hasData()?this.hideNoData():this.showNoData()}var h=c.seriesTypes,e=c.Chart.prototype,f=c.getOptions(),k=c.extend,l=c.each;k(f.lang,{noData:"No data to display"});f.noData={position:{x:0,y:0,align:"center",verticalAlign:"middle"}};f.noData.style={fontWeight:"bold",fontSize:"12px",color:"#666666"};l(["pie","gauge","waterfall","bubble",
"treemap"],function(a){h[a]&&(h[a].prototype.hasData=d)});c.Series.prototype.hasData=function(){return this.visible&&void 0!==this.dataMax&&void 0!==this.dataMin};e.showNoData=function(a){var b=this.options;a=a||b.lang.noData;b=b.noData;this.noDataLabel||(this.noDataLabel=this.renderer.label(a,0,0,null,null,null,b.useHTML,null,"no-data"),this.noDataLabel.attr(b.attr).css(b.style),this.noDataLabel.add(),this.noDataLabel.align(k(this.noDataLabel.getBBox(),b.position),!1,"plotBox"))};e.hideNoData=function(){this.noDataLabel&&
(this.noDataLabel=this.noDataLabel.destroy())};e.hasData=function(){for(var a=this.series,b=a.length;b--;)if(a[b].hasData()&&!a[b].options.isInternal)return!0;return!1};e.callbacks.push(function(a){c.addEvent(a,"load",g);c.addEvent(a,"redraw",g)})})(d)});
</script>
<div id="page_title" class="add-border" style="margin-top: 20px;background-color:#141414;height:auto;font-size:30px;margin-top:0px;color:#FFFFFF;text-align:center;border:1px solid #404040;margin:1px;">
</div>
<textarea id="legend_data_html_template" style="display:none;">
<tr>
   <td class="small-td-font" id="#idname">
        <div class="class1"id="#idnamecolor"  style="background-color:#color"></div>
        &nbsp;&nbsp;#name
   </td>
   <td id="_#idlast" valign="left">#last</td>
   <td id="_#idmin" valign="left">#min</td>
   <td id="_#idmax" valign="left">#max</td>
   <td id="_#idavg" valign="left">#avg</td>
</tr>
</textarea>
<textarea id="legend_html_template" style="display:none;">
    <div class="#legendHtmlWidth small-image-font" style="background-color:#1F1D1D;height:#height;width:#width;overflow:scroll;::--webkit-scrollbar{width:1em;};" id="show_image_data_#id" >
      <table style="width:100%;">
            <tr style="color:#0080ff;font-size:12px;">
                <td>&nbsp;</td>
                <td>last</td>
                <td>min</td>
                <td>max</td>
                <td>avg</td>
            </tr>
            #data
        </table>
       </div>
</textarea>
<div style="padding:1px;border-left:1px solid #404040;z-index:999999;position:relative;margin-left:1px;height:9999px">
    <div id="image_all_id" class="image-div">
    </div>
    <div>
<script>


function get_max_min_avg_last_value(data,opts, name){
    id = "_"+opts["id"]+name.replace(/\./g,"") 
    value = 0
    new_data = new Array();
    for(i=0;i<data.length;i++){
        new_data.push(data[i][1]);
        value += data[i][1]
    }
    last = new_data[new_data.length-1];
    new_data.sort(function (a,b) {
        return a - b;
    })
    min = new_data[0]
    avg = value / new_data.length
    max = new_data[new_data.length-1]
    units = opts["units"]
    $("#"+id+"last").html(last+units)
    $("#"+id+"max").html(max+units)
    $("#"+id+"min").html(min + units)
    $("#"+id+"avg").html(avg.toFixed(2)+units)
}

            function get_name_group(name){
                data = new Array();
                names_ = name.split(".")
                groups = names_[0]
                data.push(groups)
                name_tmp = ""
                for (i=1; i< names_.length; i++){
                    if(i<names_.length-1){
                        name_tmp += names_[i] + "."
                    }else{
                        name_tmp += names_[i]
                    }
                }
                data.push(name_tmp)
                return  data;


            }

            function toDecimal(x) {
                var f = parseFloat(x);
                if (isNaN(f)) {
                    return 0.00;
                }
                f = Math.round(x*100)/100;
                return f;
            }


            function make_image_id(opts){
                _width = (opts["width"]) ? opts["width"] : 12
                _height = (opts["height"]) ? opts["height"] : "260px"
                _margin_border = _height
                _margin_image_border = (parseInt(_height.replace(/px;/, "")) - 5) + "px"
                id = opts["name"].replace(/,/g,"_").replace(/\./g, "")
                old_html = $("#image_all_id").html()

                if(opts["valueLegend"] == "1"){
                    legendHeight = opts["legendHeight"].replace(/px;/,"")
                    _height_value = _height.replace(/px/, "")
                    _height =  parseInt(_height_value) - parseInt(legendHeight) 
                    _height = _height - 5 + "px"
                
                    if(opts["legendAlign"] == "bottom"){
                        write_html = '<div class="col-sm-'+_width+' graph" style="height:'+_margin_border+';padding:4px;background-color:#1F1D1D" >'+
                    	     '      <div class="" id="image_'+opts["id"]+'" style="height:'+_height+';width:100%;padding:4px;"></div>'+
                    	     ' #legend_data</div>'
                    }else{
                        write_html = '<div class="col-sm-'+_width+' graph" style="height:'+_margin_border+';padding:2px;background-color:#1F1D1D" >'+
                    	     '      <div class="col-sm-8" id="image_'+opts["id"]+'" style="height:'+_margin_image_border+';padding:4px;"></div>'+
                    	     ' #legend_data</div>'
                    }
                    if (old_html.indexOf('id="image_'+id+'"') == -1 ){
                        colors = opts["color"].split(",")
                        legend_html = $("#legend_html_template").val() 
                        data_html= $("#legend_data_html_template").val()
                        if(opts["legendAlign"] == "bottom"){
                           data_html = data_html.replace(/#legendHtmlWidth/, "col-sms-12")
                        }else{
                           data_html = data_html.replace(/#legendHtmlWidth/, "col-sms-"+opts["legendWidth"])
                           write_html = write_html.replace(/#height/, "100%;")
                        }
                        names = opts["name"].split(",")
                        temp_html = ""
                        for(li =0 ; li < names.length; li ++){
                    	if(!names[li]){continue}
                    	   temp_html += data_html.replace(/#name/g, names[li])
                    	   temp_html = temp_html.replace(/#idname/g, opts["id"]+(names[li].replace(/\./g,"")))
                    	   temp_html = temp_html.replace(/#color/, colors[li])
                           temp_html = temp_html.replace(/#id/g, opts["id"]+(names[li].replace(/\./g,"")))
                           temp_html = temp_html.replace(/#imageId/g, opts["id"])
                        }
                        if(parseInt(legendHeight) < 60){
                          opts["legendHeight"] = "40px;"
                        }
                        legend_html = legend_html.replace(/#data/g, temp_html)
                        write_html = write_html.replace(/#legend_data/, legend_html)
                        write_html = write_html.replace(/#width/, opts["legendWidth"])
                        $("#image_all_id").append(write_html)
                    }
                }else{
                    write_html = '<div class="col-sm-'+_width+' graph"  id="image_'+opts["id"]+'" style="height:'+_height+'"></div>'
                    old_html = $("#image_all_id").html()
                    if (old_html.indexOf('id="image_'+id+'"') == -1 ){

                        if(opts["merger"] == "1" &&  opts["gaugeDataGraph"] == "1"  ){
                              _height2 = (parseInt(_height.replace(/px;/, "")) /2 )-10 + "px"
                              _height1 = (parseInt(_height.replace(/px;/, "")) /2 )+10 + "px"
                              write_html1 = '<div   id="image_'+opts["id"]+'" style="height:'+_height1+'"></div>'
                              write_html2 = '<div   id="image_'+opts["id"]+"_1"+'" style="height:'+_height2+';margin-top:-10px;"></div>'
                              write_html = '<div class="col-sm-'+_width+' graph"  style="height: '+_height+'; margin: 0 auto">' + write_html1 + write_html2 + "</div>"
                        } 
                        $("#image_all_id").append(write_html)
                    }
                }
            }

            function getDatas(opts) {


                datas = new Array();
                names = opts["name"].split(",")
                currnet_time = new Date().getTime()
                last_time = parseInt(opts["lastTime"])
                for(var j = 0; j <names.length ; j ++){
                    name = names[j]
                    sizes = opt["size"].split(",")
                    seriesMarkers = opt["seriesMarker"].split(",")
                    if (!name) {continue}
                    names_groups_data = get_name_group(name)
                    name = names_groups_data[1]
                    type = names_groups_data[0]
                    d = {}
                    d["lineWidth"] =  sizes[j] ? sizes[j] : 1
                    if(seriesMarkers[j]){
                        d["marker"] = {}
                        d["marker"]["enabled"] = (seriesMarkers[j] == "1") ? true: false
                    }else{
                        d["marker"] = {}
                        d["marker"]["enabled"] =false 
                    }
                    d["name"] = name.replace(/SLASH/g,"/");
                    d["data"] = eval(post({}, "/monitor/graph/historyData?ip="+opts["ip"]+"&name="+name+"&type="+type));
                    if(opts["calc"] || last_time){
                        new_data = new Array()
                        for (i =0 ;i < d["data"].length; i++){
                            temp_data = new Array();
                            is_last_time = true
                            if(last_time && (currnet_time - d["data"][i][0])  > last_time){
                                is_last_time = false

                            }
                            // 判断是否是最近指定时间的数据
                            if(is_last_time){
                                temp_data.push(d["data"][i][0])
                                if(opts["calc"]){
                                    temp_data.push(toDecimal(eval(d["data"][i][1] + opts["calc"])))
                                }else{
                                    temp_data.push(d["data"][i][1])
                                }
                                new_data.push(temp_data)
                            }
                        }
                        d["data"] = new_data
                        datas.push(d)
                    }else{
                        datas.push(d)
                    }
                    get_max_min_avg_last_value(d["data"],opts, type+name)
                }

                if(opts["baselineShow"] == "1"){
                    dd = new Array();
                    d = {}
                    d["lineWidth"] = opts["baseLineSize"]
                    d["name"] = "危险线"
                    for(i =0 ;i < datas[0]["data"].length ; i++) {
                        ddd = new Array()
                        ddd.push(datas[0]["data"][i][0])
                        ddd.push(parseFloat(opts["alarmBase"]))
                        dd.push(ddd)
                    }
                    d["data"] = dd
                    d["color"] = opts["alarmBaseColor"]
                    d["fillOpacity"] = 0
                    datas.push(d)
                }
                if(opts["imageTp"] == "pie" || opts["imageTp"] == "gauge"  ) {
                    data = new Array();
                    d = {}
                    d["name"] = opts["title"] 
                    //d["showInLegend"]= true
                    d["data"] = new Array(); 
                    for(piei = 0 ; piei < datas.length; piei ++ ){
                      try{
                        ddd = {}
                        ddd["y"] = datas[piei]["data"][datas.length-1][1]
                        ddd["name"] = datas[piei]["name"]
                        d["data"].push(ddd)
                      }catch(e){
                        ddd = {}
                        ddd["y"] = 0 
                        ddd["name"] = datas[piei]["name"]
                        d["data"].push(ddd)
                      }
                     }
                   data.push(d) 
                   return data;
                }
console.log(datas)
                return datas;
            }

            /**
             * Synchronize zooming through the setExtremes event handler.
             */
            function syncExtremes(e) {
                var thisChart = this.chart;

                if (e.trigger !== 'syncExtremes') { // Prevent feedback loop
                    Echarts.each(Echarts.charts, function (chart) {
                        if (chart !== thisChart) {
                            if (chart.xAxis[0].setExtremes) { // It is null while updating
                                chart.xAxis[0].setExtremes(e.min, e.max, undefined, false, {trigger: 'syncExtremes'});
                            }
                        }
                    });
                }
            }



  function get_str(len){
        s = ""
        for(i=1;i<len;i++){
               s +="."
        }
        return s;

  }

  function get_show_legend(opts){
       if(opts["valueLegend"] == "1") return false
       if(opts["lengendShow"] == "1") return true
       return false
  }

  function change_series(namei, opt, charts, names){
        var colors = opt["color"].split(",")
        var id = opt["id"] + names[namei].replace(/\./g,"")
        $("#"+id).click(function () {
             var series = charts.series[namei];
             if (series.visible) {
                 $("#"+id+"color").css("background-color","#404040");
         	 series.hide();
             } else {
                 $("#"+id+"color").css("background-color", colors[namei]);
         	 series.show();
             }
        })
  }

function speedGraph(opt){

var opts = JSON.stringify(opt)
var opts = JSON.parse(opts)
opts["imageTp"] = "area"
opts["id"] = opts["id"]+ "_1"


//graphAll(opts)

opt["merger"] = "1"
make_image_id(opt);
//opt["ipTitle"] =""

size = "110%"
if (opts["gaugeDataGraph"] != "1"){
 size = "100%"
}

var title = ""
if (opts["gaugeDataGraph"] != "1"){
   title = (opt["ipTitle"] ? opt["ip"] + " " : " " ) + opt["title"]
}

var gaugeThickness= "5"
if(opt["gaugeThickness"]){
  gaugeThickness = opt["gaugeThickness"]
}

var gaugeFontSize = ""
var gaugeFontSizeShow = false;
if(opt["gaugeFontSize"]){
  gaugeFontSize = opt["gaugeFontSize"]
  gaugeFontSizeShow = true;
}

var gaugeOptions = {

    chart: {
        type: 'gauge',
        plotBackgroundImage: null,
        backgroundColor: '#1F1D1D',
        plotBorderWidth: 0,
         marginBottom: 0,
        plotShadow: false
    },

    title: {
        text: title,
        style:{
            color: '#ffffff',
            fontSize: "14px",
        },
    },
    pane: {
        size: size, // 图像大小
        startAngle: -100, // 控制半圆的起点
        endAngle: 100, // 控制半圆的终点
        borderWidth: 30,
        background: [{
            backgroundColor: {
                linearGradient: { x1: 0, y1: 0, x2: 0, y2: 1 },
                stops: [
                    [0, '#FFF'],
                    [1, '#FFF']
                ]
            },
            outerRadius: '0%'
        }, 
        ]
    },


    // the value axis
    yAxis: {
        min: 0,
        max: parseInt(opt["gaugeMax"]),

        minorTickInterval: 'auto',
        minorTickWidth: 1,
        minorTickLength: (opt["gaugeTickLength"]) ? parseInt(opt["gaugeTickLength"]) : 10, // 指针边框
        minorTickPosition: 'inside',
        minorTickColor: '#FFF',


        tickPixelInterval: parseInt(opt["gaugeMax"]) / 4, //  数值间隔
        tickWidth: 1,
        tickPosition: 'inside',
        tickLength: 0, // 指针
        tickColor: '#FFF',

        labels: {
            step: 2, 
            rotation: 'auto'
        },
     // title: {
     //     text: 'km/h'
     // },
      plotBands: [{
            from: 0,
            thickness: gaugeThickness + '%',
            to: parseInt(opt["gaugeOk"]),
            color: opt["gaugeOkColor"] // green
        }, {
            from: parseInt(opt["gaugeOk"]) ,
            to: parseInt(opt["gaugeWarning"]) ,
            thickness: gaugeThickness + '%',
            color: opt["gaugeWarningColor"] //waring 
        }, {
            from: parseInt(opt["gaugeWarning"]) ,
            to: parseInt(opt["gaugeMax"]),
            thickness: gaugeThickness + '%',
            color: opt["gaugeDangerColor"] //waring 
        }]
    },
    xAxis: {
        crosshair: true,
        crosshair: {
            width: 0.9,
            color: 'red'
        }
    },
    tooltip: {
        enabled: false,
    },
    plotOptions: {
        series: {
            dataLabels: {
                enabled: gaugeFontSizeShow,
                borderRadius: 0,
                backgroundColor: '#1F1D1D',
                borderWidth: 0,
                borderColor: '#f7a54a',
                shadow:false,
                format: '{y} '+opt["units"],
                style:{
                    textOutline: '0px contrast',
                    fontSize: opt["gaugeFontSize"] + 'px', 
                    color: (opt["gaugeFontColor"]) ? opt["gaugeFontColor"] : '#1F1D1D',
                    borderColor: (opt["gaugeFontColor"]) ? opt["gaugeFontColor"] : '#1F1D1D',
                    fontWeight: "bold",
                    backgroundColor: '#1F1D1D'
                },
            }
        },
        gauge : {
	   dataLabels : {
                     baseLength:'0%' ,
                     rearLength:'0%',  
                     enabled :false 
		},
		dial : {
	          backgroundColor: '#FFFFFF',
	          // 半径：指针长度
	          radius : '100%',
            	},
             pivot: {
                enabled : false,
                radius: 0,
                borderWidth: 5,
                borderColor: '#f7a54a',
	        backgroundColor: '#f7a54a',
            },
          }
    },

}

series = getDatas(opt)
Echarts.chart('image_' + opt["id"], Echarts.merge(gaugeOptions, {

    series: series 
  //series: [{
  //    name: 'Speed',
  //    data: [80],
  //    tooltip: {
  //        valueSuffix: ' km/h'
  //    }
  //}]

}));

if(opts["color"]) {
    colors = opts["color"].split(",")
}else{
    colors =  ['#fAB839','#E26742', '#A5F78F', '#83CEDA','#ff0066', '#eeaaee', '#55BF3B', '#DF5353', '#7798BF', '#aaeeee', '#2b908f', '#90ee7e'];
}
                Echarts.setOptions({
                    global: {
                        useUTC: false
                    }
                });
var gaugeOptions1 = {
    chart: {
        type: 'area',
        backgroundColor: '#1F1D1D',
        plotBorderWidth: 0,
        plotShadow: false
    },

    colors: colors,
    title: {
            text: (opt["ipTitle"] ? opt["ip"] + " " : " " )  + opt["title"] +"  "+ series[0]["data"][0]["y"] +" "+ opt["units"],
            floating:true,
            style:{
                color: '#ffffff',
                fontSize: "10px",
            },
    },    
    legend: {
          enabled:false
    },
    xAxis: {
        crosshair: true,
        type: 'datetime',
        tickPixelInterval: 75,
        gridLineWidth: 0.4,
        gridLineColor: '#e0e0e0',
        dashstyle : 'Solid',
        events: {
            setExtremes: syncExtremes
        },
        valueSuffix: opt["units"],
        labels: {
            style: {
                color: '#ffffff'
            }
        },
        lineColor: '#101010',
        lineWidth: 1,
        crosshair: {
            width: 0.9,
            color: 'red'
        }
    },
     yAxis: {
         title: {
             text: ""
         },
         labels: {
             style: {
                 color: '#a0a0a0'
             },
             format: "{value} " + opt["units"],
         },
         gridLineWidth: 0.1,
         tickPixelInterval: 28,
         gridLineColor: '#e0e0e0',
     },
     plotOptions: {
           area: {
               states: {
                   hover: {
                       lineWidth: opt["lineStatesHoverLineWidth"] ? opt["lineStatesHoverLineWidth"]  : 1.1,
                   }
               },
           },
           series: {
               lineWidth : 0.2,
               fillOpacity: 0.15,
               pointInterval: 10,
           }
       },
     tooltip: {
         backgroundColor: '#1F1D1D',
         // 大开提示同时显示所有
         shared: (opt["tooltipShared"] == "1" ) ? true: false,
         crosshairs: true,
         borderWdith:0,
         borderColor:"#1f1d1d",
         style: {
             color: '#ffffff',
             fontWeight: 'bold'
         },
         valueSuffix: opt["units"],
         useHTML: true,
         xDateFormat: '%Y-%m-%d %H:%M%S',
         headerFormat: '<div class="small-font"><small><b>{point.key}</b></small><table>',
         pointFormat: '<tr style="height:8px;overflow:hidden" nowrap><td style="height:5px;"><nobr><hr style="background-color: {series.color};margin:0px;width:14px;height:2px;" size="1"/></nobr></td><td>'+
         '&nbsp;{series.name}: </td>' +
         '<td style="text-align: right"><span style="margin-left:20px;"><b>{point.y}</b></span></td></tr>',
         footerFormat: '</table></div>',
     },

}

// 显示单图
if(opts["gaugeDataGraph"] != "1"){
  return
}

// The RPM gauge
var chartRpm = Echarts.chart('image_'+opts["id"] , Echarts.merge(gaugeOptions1, {
    yAxis: {
        min: 0,
        title: {
            text: ''
        }
    },
    series: getDatas(opts)
}));

}

  function graphAll(opt) {
                opt["color"] =  opt["color"]
                make_image_id(opt);
                if(opt["color"]) {
                    colors = opt["color"].split(",")
                }else{
                    colors =  ['#fAB839','#E26742', '#A5F78F', '#83CEDA','#ff0066', '#eeaaee', '#55BF3B', '#DF5353', '#7798BF', '#aaeeee', '#2b908f', '#90ee7e'];
                }
                startT = $('#startSendTime').val()
                endT = $('#endSendTime').val()
                if (!startT) {
                    startT = ""
                }
                if (!endT) {
                    endT = ""
                }
                Echarts.setOptions({
                    global: {
                        useUTC: false
                    }
                });

                t = "&startT=" + startT + "&endT=" + endT;
                var charts = Echarts.chart("image_"+opt["id"],{
                    chart: {
                        type: opt["imageTp"],
                        zoomType: 'x',
                        backgroundColor: '#1F1D1D',
                    },
                    subtitle: {
                        text: opt["subTile"],
                    },
                    colors: colors,
                    title: {
                        text: (opt["ipTitle"] ? opt["ip"] + " " : " " ) + opt["title"],
                        style:{
                            color: '#ffffff',
                            fontSize: "14px",
                        },
                    },
                    xAxis: {
                        crosshair: true,
                        type: 'datetime',
                        tickPixelInterval: 75,
                        gridLineWidth: 0.4,
                        gridLineColor: '#e0e0e0',
                        dashstyle : 'Solid',
                        events: {
                            setExtremes: syncExtremes
                        },
                        valueSuffix: opt["units"],
                        labels: {
                            style: {
                                color: '#ffffff'
                            }
                        },
                        lineColor: '#101010',
                        lineWidth: 1,
                        crosshair: {
                            width: 0.9,
                            color: 'red'
                        }
                    },
                    yAxis: {
                        title: {
                            text: ""
                        },
                        labels: {
                            style: {
                                color: '#ffffff'
                            },
                            format: "{value} " + opt["units"],
                        },
                        gridLineWidth: 0.4,
                        tickPixelInterval: 28,
                        gridLineColor: '#e0e0e0',
                    },

                    legend: {
                        enabled: get_show_legend(opt), 
                         verticalAlign: 'top',
                        //floating: true,
                         //y: 2,
                        align: "right",
                        layout: 'vertical',
                        //borderWidth: 0,
                        itemStyle: {
                            color: '#e0e0e0',
                            fontWeight: '340'
                        },
                        itemHoverStyle :{
                            color: '#ffffff',
                        },
                        symbolHeight: 8,
                        symbolWidth: 22,
                        symbolRadius: 0,
                    },

                    tooltip: {
                        backgroundColor: '#1F1D1D',
                        // 大开提示同时显示所有
                        shared: (opt["tooltipShared"] == "1" ) ? true: false,
                        crosshairs: true,
                        borderWdith:0,
                        borderColor:"#1f1d1d",
                        style: {
                            color: '#ffffff',
                            fontWeight: 'bold'
                        },
                        valueSuffix: opt["units"],
                        useHTML: true,
                        xDateFormat: '%Y-%m-%d %H:%M%S',
                        headerFormat: '<div class="small-font"><small><b>{point.key}</b></small><table>',
                        pointFormat: '<tr style="height:8px;overflow:hidden" nowrap><td style="height:5px;"><nobr><hr style="background-color: {series.color};margin:0px;width:14px;height:2px;" size="1"/></nobr></td><td>'+
                        '&nbsp;{series.name}: </td>' +
                        '<td style="text-align: right"><span style="margin-left:20px;"><b>{point.y}</b></span></td></tr>',
                        footerFormat: '</table></div>',
                    },

                    plotOptions: {
                        area: {
                            states: {
                                hover: {
                                    lineWidth: opt["lineStatesHoverLineWidth"] ? opt["lineStatesHoverLineWidth"]  : 2,
                                }
                            },
                        },
                        line: {
                            states: {
                                hover: {
                                    lineWidth: opt["lineStatesHoverLineWidth"] ? opt["lineStatesHoverLineWidth"]  : 2,
                                }
                            },
                        },
                        series: {
                            cursor: 'pointer',
                            point: {
                                events: {
                                    click: function (e) {
                                        hs.htmlExpand(null, {
                                            pageOrigin: {
                                                x: e.pageX || e.clientX,
                                                y: e.pageY || e.clientY
                                            },
                                            headingText: this.series.name,
                                            maincontentText: Echarts.dateFormat('%A, %b %e, %Y', this.x) + ':<br/> ' +
                                            this.y + ' visits',
                                            width: 200
                                        });
                                    }
                                }

                            },
                            marker: {
                                lineWidth: 0
                            }
                        },
                        series: {
                            lineWidth : 1.2,
                            fillOpacity: 0.15,
                            pointInterval: 10,
                            // 去掉小圆点
                            //marker: {
                            //  enabled: opt["seriesMarker"] ?  true: false,
                            // }
                        }
                    },
                    exporting: {
                        enabled: false
                    },
                    series: getDatas(opt)
                });
		var names = opt["name"].split(",")
                for(namei= 0 ; namei< names.length; namei ++){
                   change_series(namei, opt, charts, names)
                }
            }


            function graphPie(opt){
                make_image_id(opt);
                if(opt["color"]) {
                    colors = opt["color"].split(",")
                }else{
                    colors =  ['#fAB839','#E26742', '#A5F78F', '#83CEDA','#ff0066', '#eeaaee', '#55BF3B', '#DF5353', '#7798BF', '#aaeeee', '#2b908f', '#90ee7e'];
                }

                Echarts.getOptions().plotOptions.pie.colors = colors;

                if(opt["color"]) {
                    colors = opt["color"].split(",")
                }else{
                    colors =  ['#fAB839','#E26742', '#A5F78F', '#83CEDA','#ff0066', '#eeaaee', '#55BF3B', '#DF5353', '#7798BF', '#aaeeee', '#2b908f', '#90ee7e'];
                }

                // Build the chart
                var charts = Echarts.chart("image_"+opt["id"],{
                    chart: {
                        backgroundColor: '#1F1D1D',
                        type: 'pie'
                    },
                    title: {
                        text: (opt["ipTitle"] ? opt["ip"] : " " +" " ) + opt["title"],
                        style:{
                            color: '#ffffff',
                            fontSize: "14px",
                        },
                    },
                    tooltip: {
                        backgroundColor: '#1F1D1D',
                        style: {
                            color: '#ffffff',
                            fontWeight: 'bold'
                        },
                        pointFormat: '<tr style="height:8px;overflow:hidden" nowrap><td style="height:5px;"><nobr><hr style="background-color: #141414;margin:0px;width:14px;height:2px;" size="1"/></nobr></td><td>'+
                        '{series.name}: </td>' +
                        '<td style="text-align: right"><span style="margin-left:20px;">{point.percentage:.1f}% data: {point.y}'+opt["units"]+'</span></td></tr>',
                        footerFormat: '</table></div>',
                    },
                    plotOptions: {
                        pie: {
                            allowPointSelect: true,
                            cursor: 'pointer',
                            //size: 180,
                            dataLabels: {
                                enabled: true,
                                color: '#FFFFFF',
                                format: '<span style="color:{point.color}">{point.name}</span>: {point.percentage:.2f}%  {point.y}'+opt["units"],
                            }
                        }
                    },
                    series: getDatas(opt)
                });
		var names = opt["name"].split(",")
                for(namei= 0 ; namei< names.length; namei ++){
                   change_series(namei, opt, charts, names)
                }
            }


            #if(!$graphTemplateMap)

                #foreach($ip in $ips)
                    #foreach($id in $graphIds)
                    opt = '${graphMap.get($id)}'
                    opt = JSON.parse(opt)
                    opt["ip"] ="${ip}"
                    opt["id"] = "${id}" + (Math.random()+"").replace(/\./g, "_")
                    if(opt["imageTp"] == "line" || opt["imageTp"] == "area"){
                        graphAll(opt)
                    }
                    if(opt["imageTp"] == "pie" ){
                        //graphPie(opt)
                    }
                    if(opt["imageTp"] == "text" ){
                          //noDataGraph(opt)
                    }
                    #end
                #end
            #else
            ids = JSON.parse('${graphIds}');
            ips = JSON.parse('${graphIpMap}');
            // 参数传递IP
            parameter_ip = ""
            if("$!{ips}"){
              parameter_ip = "$!{ips}".split(",")
            }
            width = JSON.parse('${graphWidthMap}');
            height = JSON.parse('${graphHeightMap}');
            templateMap = JSON.parse('${graphTemplateMap}');
            for (ii=0;ii<ids.length;ii++){
                graphId = ids[ii]
                opt = templateMap["graphId"+graphId]
                opt = JSON.parse(opt)
                opt["ipTitle"] = "1"
                opt["width"] = width[graphId+(ii+"")];
                opt["height"] = height[graphId+(ii+"")];
                ipdata = ips[graphId+(ii+"")].split(",")
                if(parameter_ip){
                  ipdata = parameter_ip
                }
                for (jj = 0 ;jj < ipdata.length; jj++){
                    opt["ip"] = ipdata[jj]
                    opt["id"] = graphId + (Math.random()+"").replace(/\./g, "_")
                    if(opt["imageTp"] == "line" || opt["imageTp"] == "area"){
                        graphAll(opt)
                    }
                    if(opt["imageTp"] == "pie" ){
                        graphPie(opt)
                    }
                    if(opt["imageTp"] == "text" ){
                          noDataGraph(opt)
                    }
                    if(opt["imageTp"] == "gauge" ){
                          speedGraph(opt)
                    }
                }
            }
            #end

            $("#page_title").html("${title}")

   //       setTimeout(function(){
   //                   location.reload()}
   //               , 1000 * 60 * 2)

            window.onload = function() {
                document.body.style.backgroundColor="#141414";
            }


function noDataGraph(opt){
    if(opt["color"]) {
        colors = opt["color"].split(",")
    }else{
        colors =  ['#fAB839','#E26742', '#A5F78F', '#83CEDA','#ff0066', '#eeaaee', '#55BF3B', '#DF5353', '#7798BF', '#aaeeee', '#2b908f', '#90ee7e'];
    }
    series =  getDatas(opt) 
    make_image_id(opt);
    Echarts.chart("image_" + opt["id"], {
        chart: {
           zoomType: 'x',
           marginBottom: 0,
           marginTop: parseInt(opt["height"].replace(/px;/,""))/8,
           type: "area",
           backgroundColor: '#1F1D1D',
        },
        title: {
            text: (opt["ipTitle"] ? opt["ip"] + " " : " " ) + opt["title"],
            style:{
                color: '#ffffff',
                fontSize: "14px",
            },
        },
        subtitle: {
              text: series[0]["data"][(series[0]["data"].length - 1)][1] + opt["units"],
    	      style: {
    	        fontWeight: 'bold',
    	        fontSize: opt["textGraphShow"] ? parseInt(opt["height"].replace(/px;/,""))/ 5 +"px" : parseInt(opt["height"].replace(/px;/,""))/ 3+"px",
    	        color: colors[0]
    	      }
        },
        xAxis: {
           crosshair: true,
           type: 'datetime',
           tickPixelInterval: 75,
           gridLineWidth: 0.0,
           gridLineColor: '#e0e0e0',
           labels: {
            enabled: false
           },
           lineColor: '#101010',
           lineWidth: 1,
           crosshair: {
               width: 0.9,
               color: 'red'
           }
        },
        lang: {
    	    noData: ""
        },
       plotOptions: {
           area: {
               states: {
                   hover: {
                       lineWidth: opt["lineStatesHoverLineWidth"] ? opt["lineStatesHoverLineWidth"]  : 1.1,
                   }
               },
           },
           series: {
               lineWidth : 0.2,
               fillOpacity: 0.15,
               pointInterval: 10,
           }
       },
       tooltip: {
           backgroundColor: '#1F1D1D',
           // 大开提示同时显示所有
           shared: (opt["tooltipShared"] == "1" ) ? true: false,
           crosshairs: true,
           borderWdith:0,
           borderColor:"#1f1d1d",
           style: {
               color: '#ffffff',
               fontWeight: 'bold'
           },
           valueSuffix: opt["units"],
           useHTML: true,
           xDateFormat: '%Y-%m-%d %H:%M%S',
           headerFormat: '<div class="small-font"><small><b>{point.key}</b></small><table>',
           pointFormat: '<tr style="height:8px;overflow:hidden" nowrap><td style="height:5px;"><nobr><hr style="background-color: {series.color};margin:0px;width:14px;height:2px;" size="1"/></nobr></td><td>'+
           '&nbsp;{series.name}: </td>' +
           '<td style="text-align: right"><span style="margin-left:20px;"><b>{point.y}</b></span></td></tr>',
           footerFormat: '</table></div>',
       },
        yAxis: {
           title: {
                text: ""
           },
           labels: {
            enabled: false
           },
           gridLineWidth: 0.0,
        },
        legend: {
              enabled: false, 
        },
        series: opt["textGraphShow"] == "1"  ? series: [] 
    });

}
</script>
